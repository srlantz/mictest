################################################################
# Build notes
################################################################

# Requires a recent gcc, e.g.:
#   . /opt/rh/devtoolset-2/enable
# This is also needed for icc as it uses gcc headers.

# To build mkFit -- Matriplex Kalman Fit:
# - enable USE_MATRIPEX in section 5,
# - cd mkFit; make (or make -C mkFit).


################################################################
# Configuration section
################################################################

# 1. Use ROOT or not (never used on MIC)
# Comment out to disable root ("yes" is not relevant)
#WITH_ROOT := yes

# 2. Use gcc (clang by default on mac) or icc
# Uncomment to use icc. For mic icc is always used.
CXX := icc

# 3. Optimization
# -O3 implies vectorization and simd (but not AVX)
OPT := -O3 -g

# 4. Vectorization settings
VEC_GCC  := # -mavx # -fopt-info-vec
VEC_ICC  := -mavx
VEC_MIC  := -mmic -DUSE_VTUNE_PAUSE

# 5. Matriplex, intrinsics
# Matriplex is required for build in mkFit/
# Comment-out for matriplex, intrinsics (supported for MIC)
USE_MATRIPLEX  := -DUSE_MATRIPLEX
USE_INTRINSICS := -DMPLEX_USE_INTRINSICS

# 6. MIC stuff is built when icc is the chosen compiler.
# MIC build is always done without root.
# Need to build root on MIC and figure out how to deploy it there.

# 7. OSX hack (is there a good way to detect clang?)
# MT needs this on OSX-10.8, c++ -v
#    Apple LLVM version 5.1 (clang-503.0.40) (based on LLVM 3.4svn)
# OSX_CXXFLAGS := -stdlib=libc++
# And with gcc-4.8.1 from cms we need this
# OSX_LDFLAGS  := -lstdc++
#
# Note: there is a problem building with USE_MATRIPLEX on as there
# was no __builtin_assume_aligned support in clang until recently:
#   http://reviews.llvm.org/rL217349
# It will probably take a while before this gets to osx / xcode.
# If somebody is willing to test this we can try without this
# but it was giving 50% speedup on icc.

# 8. Use USolids Geometry (turn off for a trivial cylinder)
#WITH_USOLIDS := yes

# 9. Check track state propagation for success, turns on simple
# checks of filter convergence
USE_STATE_VALIDITY_CHECKS := -DCHECKSTATEVALID

# 10. Turn on multiple scattering
#USE_SCATTERING := -DSCATTERING

# 11. In track building, use linear interpolation across a
# a volume instead of using the geometry
USE_LINEAR_INTERPOLATION := -DLINEARINTERP

# 12. Use built tracks for fitting, comment out to fit sim tracks
ENDTOEND := -DENDTOEND

# 13. Use for eta-phi segmentation
USE_ETA_SEGMENTATION := -DETASEG

################################################################
# Derived settings
################################################################

CPPFLAGS := -I. ${USE_MATRIPLEX} ${USE_INTRINSICS} # -MMD
CXXFLAGS := ${OPT} -std=c++11 ${OSX_CXXFLAGS}
LDFLAGS  := -pthread ${OSX_LDFLAGS}

CPPFLAGS += ${USE_STATE_VALIDITY_CHECKS} ${USE_SCATTERING} ${USE_LINEAR_INTERPOLATION} ${ENDTOEND} ${USE_ETA_SEGMENTATION}

ifneq ($(CXX),icc)
  #CXXFLAGS += -Wall -Wno-unknown-pragmas
endif

ifdef USE_MATRIPLEX

ifeq ($(CXX),icc)
#  CXXFLAGS += -openmp
#  LDFLAGS  += -openmp
  VEC_HOST := ${VEC_ICC}
else
#  CXXFLAGS += -fopenmp
#  LDFLAGS  += -fopenmp
  VEC_HOST := ${VEC_GCC}
endif

endif

ifdef WITH_USOLIDS
  CPPFLAGS += -DWITH_USOLIDS
  LIBUSOLIDS := USolids-host/libusolids.a
  LIBUSOLIDS_MIC := USolids-mic/libusolids.a
  CMAKEFLAGS := -DCMAKE_CXX_COMPILER:STRING=${CXX} -DCMAKE_CXX_FLAGS:STRING="${CXXFLAGS} ${VEC_HOST}"
  CMAKEFLAGS_MIC := -DCMAKE_CXX_COMPILER:STRING=${CXX} -DCMAKE_CXX_FLAGS:STRING="${CXXFLAGS} ${VEC_MIC}"
endif

CPPFLAGS_NO_ROOT := ${CPPFLAGS} -DNO_ROOT
LDFLAGS_NO_ROOT  := ${LDFLAGS}

ifdef WITH_ROOT
  CPPFLAGS += $(shell root-config --cflags)
  LDFLAGS  += $(shell root-config --libs)
else
  CPPFLAGS += -DNO_ROOT
endif
